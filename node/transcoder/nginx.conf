user www-data;
worker_processes auto;
worker_rlimit_nofile 8192;
pid /run/nginx.pid;
rtmp_auto_push on;

events {
    worker_connections 4096;
}

rtmp {
	# logging
	access_log /var/log/nginx/rtmp-access.log;
	
    server {
        listen 1935;
        chunk_size 4096;
        max_message 1M;

        # rtmp ingress from inbound relay - this is now a verified connection
		application convert_rtmp_to_hls {
			# enable/disable the live application.
			live on;

			# Audio and video data is transmitted on the same RTMP chunk stream. Default=off.
			interleave off;

			# Makes video stream start with a key frame. Default=off.
			wait_key off;
			
			# Disable audio until first video frame is sent (can cause delay). Default=off.
			wait_video off;
			
			# If disabled prevents viewers from connecting to idle/nonexistent streams and disconnects all. 
			idle_streams off;
			
			# Drop publisher that has been idle for this time.
			drop_idle_publisher off;

			# convert rtmp_guid to hls_guid
			allow play all;
			on_publish http://localhost/redirect.php;
        }

        application 1080_in_no_recording {
			# enable/disable the live application.
			live on;

			# Audio and video data is transmitted on the same RTMP chunk stream. Default=off.
			interleave off;

			# Makes video stream start with a key frame. Default=off.
			wait_key off;
			
			# Disable audio until first video frame is sent (can cause delay). Default=off.
			wait_video off;
			
			# If disabled prevents viewers from connecting to idle/nonexistent streams and disconnects all. 
			idle_streams off;
			
			# Drop publisher that has been idle for this time.
			drop_idle_publisher off;

            # 1080p
            # -c:v libx264 -c:a aac -b:v 2400k -b:a 128k -vf "scale=1920:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/transcode_out/$name_1920x1080 
            
            # record live stream
            # -c copy -f flv rtmp://localhost/recordings/$name

            # audio only stream
            # -vn -acodec aac -f flv rtmp://localhost/transcode_out/$name_audio;

            # screen resolutions vs bitrate
            # 
            # 4k = 3480 x 2160 @ 15 mbit
            # FHD = 1920 x 1080 @ 8 mbit
            # HD = 1280 x 720 @ 4 mbit -c:a aac -b:v 4M -b:a 128k
            # SD = 640 x 480 @ 1 mbit -c:a aac -b:v 1M -b:a 96k
            # SD = 480 x 360 @ 512 k -c:a aac -b:v 512k -b:a 32k
            # SD = 192 x 144 @ 256 k
            
            # transcode
            exec_push ffmpeg -re -threads 1 -i rtmp://localhost/$app/$name -async 1 -vsync -1 
                -c:v libx264 -b:v 1M -bufsize 1M -maxrate 1M -g 60 -vf "scale=640:480" -c:a copy -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/hls/$name_480 
                -c:v libx264 -b:v 4M -bufsize 4M -maxrate 4M -g 60 -vf "scale=1280:720" -c:a copy -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/hls/$name_720 
                -c copy -f flv rtmp://localhost/hls/$name_1080;
        }

        application 1080_in {
			# enable/disable the live application.
			live on;

			# Audio and video data is transmitted on the same RTMP chunk stream. Default=off.
			interleave off;

			# Makes video stream start with a key frame. Default=off.
			wait_key off;
			
			# Disable audio until first video frame is sent (can cause delay). Default=off.
			wait_video off;
			
			# If disabled prevents viewers from connecting to idle/nonexistent streams and disconnects all. 
			idle_streams off;
			
			# Drop publisher that has been idle for this time.
			drop_idle_publisher off;

            # 1080p
            # -c:v libx264 -c:a aac -b:v 2400k -b:a 128k -vf "scale=1920:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/transcode_out/$name_1920x1080 
            
            # record live stream
            # -c copy -f flv rtmp://localhost/recordings/$name

            # audio only stream
            # -vn -acodec aac -f flv rtmp://localhost/transcode_out/$name_audio;

            # screen resolutions vs bitrate
            # 
            # 4k = 3480 x 2160 @ 15 mbit
            # FHD = 1920 x 1080 @ 8 mbit
            # HD = 1280 x 720 @ 4 mbit
            # SD = 640 x 480 @ 1 mbit
            # SD = 480 x 360 @ 512 k
            # SD = 192 x 144 @ 256 k
            
            # transcode
            exec_push ffmpeg -re -threads 1 -i rtmp://localhost/$app/$name -async 1 -vsync -1 
                -c:v libx264 -b:v 1M -bufsize 1M -maxrate 1M -g 60 -vf "scale=640:480" -c:a copy -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/hls/$name_480 
                -c:v libx264 -b:v 4M -bufsize 4M -maxrate 4M -g 60 -vf "scale=1280:720" -c:a copy -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/hls/$name_720 
                -c copy -f flv rtmp://localhost/hls/$name_1080 
                -c copy -f flv rtmp://localhost/recordings/$name;
        }

        application 720_in {
			# enable/disable the live application.
			live on;

			# Audio and video data is transmitted on the same RTMP chunk stream. Default=off.
			interleave off;

			# Makes video stream start with a key frame. Default=off.
			wait_key off;
			
			# Disable audio until first video frame is sent (can cause delay). Default=off.
			wait_video off;
			
			# If disabled prevents viewers from connecting to idle/nonexistent streams and disconnects all. 
			idle_streams off;
			
			# Drop publisher that has been idle for this time.
			drop_idle_publisher off;

            # 1080p
            # -c:v libx264 -c:a aac -b:v 2400k -b:a 128k -vf "scale=1920:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -crf 23 -f flv rtmp://localhost/transcode_out/$name_1920x1080 
            
            # record live stream
            # -c copy -f flv rtmp://localhost/recordings/$name

            # audio only stream
            # -vn -acodec aac -f flv rtmp://localhost/transcode_out/$name_audio;

            # screen resolutions vs bitrate
            # 
            # 4k = 3480 x 2160 @ 15 mbit
            # FHD = 1920 x 1080 @ 8 mbit
            # HD = 1280 x 720 @ 4 mbit
            # SD = 640 x 480 @ 1 mbit
            # SD = 480 x 360 @ 512 k
            # SD = 192 x 144 @ 256 k
            
            # transcode
            exec_push ffmpeg -re -threads 1 -i rtmp://localhost/$app/$name -async 1 -vsync -1 
               -sc_threshold 0 -c:v copy -b:v 1M -bufsize 1M -maxrate 1M -g 60 -vf "scale=640:480" 
                    -c:a copy
                        -tune zerolatency -preset veryfast -crf 23 
                            -f flv rtmp://localhost/hls/$name_480 
                -c copy -f flv rtmp://localhost/hls/$name_720;
        }

        application hls {
			live on;			                            # This enables or disables this application.
            hls on;				                            # This makes sure that a m3u8 index file will be created to play our .ts video files.
            hls_path /mnt/streaming/hls;	                # Location where the temporary video fragment files will be stored. 
			hls_fragment 10s;	                            # Sets HLS fragment length in seconds or minutes. Default = 5s.
			hls_playlist_length 60s;		                # Sets HLS playlist length in seconds or minutes. Default = 30s.
            hls_fragment_naming timestamp;                  # adds timestamp to filename
			# hls_base_url https://watch.frankspeech.io/hls/; # add a URL for absolute paths.
            # hls_sync 100ms;		                        # Timestamp threshold. Prevents crackling noise after conversion from low (1KHz) to highres(90KHz)
			hls_nested off;			                        # In this mode a subdirectory is created for each stream under hls_path.
			hls_type live;			                        # Options: live|event. Live plays from the current position. Event plays from start of playlist.
			hls_continuous off;		                        # HLS sequence number is started from where it stopped last time. Old fragments are kept.
			hls_cleanup on;			                        # Automatically clean up temp files. When turned on, it automatically negates hls_continues
			# allow publish 127.0.0.1;	                    # Only localhost (this includes /live feed) is allowed to publish to the /hls application
			# deny publish all;                             # Uncomment this to truly restrict publish to localhost.
			allow play all;			                        # Allow everybody to play the HLS streams.

			#### HLS VARIANTS ####
			# When hls_variant suffix is matched on stream-name, a variant playlist is created for current stream with all entries specified
			# Stripped name without suffix is used as variant stream name. The original stream is processed as usual.
			# Make sure you use the same naming convention as used in the output names of the ffmpeg commands above.

            hls_variant	_480	    BANDWIDTH=1024000;
            hls_variant	_720	    BANDWIDTH=4096000;
            hls_variant _1080       BANDWIDTH=8192000;
            # hls_variant _audio    BANDWIDTH=64000;
		}

        application dash {
			dash on;			            # on|off. Toggles MPEG-DASH on the current application.
			live on;			            # Enables or disables the application.
			dash_path /mnt/streaming/dash;	# Location to store the video fragment files. Will be created if it doesn't exist.
			dash_fragment 5s;		        # Sets DASH fragment length in seconds or minutes. Default= 5s.
			dash_playlist_length 30s;	    # Sets MPEG-DASH playlist length. Defaults= 30s.
			dash_nested on;			        # In this mode a subdirectory of dash_path is created for each stream. Default=off.
			dash_cleanup on;		        # Cache manager process removes old DASH fragments and playlist files from dash_path.
			# allow publish  127.0.0.1;	    # Allow only localhost to publish to /dash
			allow play all;			        # Allow everybody to play these streams.
		}

        application recordings {
			live on;				                    # on|off. Enables this application and allowing live streaming to it. Default=on.
			record all;				                    # Records everything sent to /rec. Options are: off|all|audio|video|keyframes|manual
			record_unique on;			                # Appends timestamp to files. Otherwise the same file is over-written
			record_path /mnt/streaming/live_recordings;	# Location where the recordings will be stored. Adjust this according to your needs.
			# record_suffix -%d-%b-%y-%T.flv;		    # Added to filenames. Example uses 'strftime' results in: -24-Apr-13-18:23:38.flv.
			# record_max_size 128K;			            # Set maximum file size of the recorded files.
			# record_max_frames 200;		            # Sets maximum number of video frames per recorded file.

			# convert flv to mp4
			# exec_record_done ffmpeg -i $path -c copy $dirname/$basename.mp4;
            # exec_record_done bash -c /opt/zeus/live_to_vod.sh $path $basename;
        }
    }
}

http {
	# logging
	log_format main	'$remote_addr - $remote_user [$time_local] "$request" '
			'$status $body_bytes_sent "$http_referer" '
			'"$http_user_agent" "$http_x_forwarded_for" $request_time';

	access_log /var/log/nginx/access.log main;
	error_log /var/log/nginx/error.log warn;

    gzip off;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    server {
        listen 80;
        root /var/www/html;

        location / {
			try_files $uri $uri/ /index.php?$args;
		}

		location ~ \.php$ {
			include fastcgi.conf;
			include /etc/nginx/fastcgi_params;
			fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			fastcgi_intercept_errors on;
		}

        location /hls {
            alias /mnt/streaming/hls;		            # Points to where the video fragment files are located
            autoindex on;				                # Optional. Allow browsing of the video fragment files folder
            expires -1;				                    # Cache related
            add_header Cache-Control no-cache;	        # Prevent caching of HLS fragments
            add_header Access-Control-Allow-Origin *;   # Allow remote web players to access our playlist
            types {
                application/vnd.apple.mpegurl m3u8;
                text/html html;
                video/mp2t ts;
            }

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        location /recordings {
            alias /mnt/streaming/recordings;		# Points to where the video fragment files are located
            autoindex on;				# Optional. Allow browsing of the video fragment files folder
            add_header Cache-Control no-cache;	# Prevent caching of HLS fragments
            add_header Access-Control-Allow-Origin *; # Allow remote web players to access our playlist

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;

			# Refreshes the stat page every 5 seconds.
            add_header Refresh "5; $request_uri";
        }

        location /stat.xsl {
            root /var/www/html;
        }

        location /control {
            rtmp_control all;
        }

        location /nginx_status {
            stub_status on;
            allow 127.0.0.1;
        }
    }
}
